/* ==========================================================================
   FigureImage
   ========================================================================== */

/**
 * A figure element and its desendent image within a grid (.Grid) or not
 *
 * Markup example:
 *
 * <figure class="FigureImage">
 * 		<img src="..." class="FigureImage-item" alt="A single image" />
 * </figure>
 */

// .FigureImage {}

/**
 * A figure element (and image) within a (multifigure) grid
 *
 * Can be generated in (Kirby) Markdown with (figure: ) syntax
 * Contains one image by default, but can handle multiple images (multifigure)
 *
 * The multifigure uses the .Grid component to layout the items
 *
 * Markup examples:
 *
 * <figure class="FigureImage">
 * 		<img src="..." class="FigureImage-item" alt="Just a single image (no grid)" />
 * </figure>
 *
 * <figure class="FigureImage Grid Grid--withGutter">
 * 		<img src="..." class="FigureImage-item Grid-cell u-width1of2" alt="First image in row" />
 * 		<img src="..." class="FigureImage-item Grid-cell u-width1of2" alt="Secondimage in row" />
 * </figure>
 *
 * <figure class="FigureImage Grid Grid--alignCenter">
 * 		<img src="..." class="FigureImage-item Grid-cell u-width2of3--compact" alt="A centered image" />
 * </figure>
 *
 */

/**
 * Always occupy available space (even when wider than natural width of image)
 */

.FigureImage-item {
	width: 100%;
}

/**
 * Align single figure image to center
 */

.FigureImage--alignCenter {
	text-align: center !important;

	> * {
		margin-left: auto;
		margin-right: auto;
	}
	.FigureImage-caption {
		text-align: left;
	}
}

/**
 * Figureimage figcaption
 */

.FigureImage figcaption {
	@include rhythm-font($ms-down1); /* Reset font-size (it's set to `0` by the `.Grid` class!) */

	margin-top: rhythm(.5);
	margin-bottom: rhythm(1.5);
}

/**
 * Figureimage gutter/spacing:
 * 1. default (rhythm unit)
 * 2. percentage based
 *
 * For production out-comment the gutter/spacing method that is not being used!
 */

.FigureImage.Grid--withGutter { // [1]

	.Grid-cell {
		margin-top: rhythm($grid-gutter-rhythm-unit); /* Set vertical grid spacing */
	}
	& figcaption {
		padding-right: rhythm(.5 * $grid-gutter-rhythm-unit); /* Align caption to image(s) by setting half gutter rhythm units */
		padding-left: rhythm(.5 * $grid-gutter-rhythm-unit);
	}
}

.FigureImage.Grid--withGutterPercentage { // [2]

	.Grid-cell {
		margin-top: $grid-spacing-percentage; /* Set vertical grid percentages */
	}
	& figcaption {
		padding-right: .5 * $grid-gutter-percentage; /* Align captions image(s) by setting half gutter percentages */
		padding-left: .5 * $grid-gutter-percentage;
	}
}

/**
 * Reset vertical spacing to '0' for both default and percentage based spacing
 * --- from the (default or passed via text) 'breakpoint' and up --- of all
 * elements with `.Grid-cell` class, that are wrapped in an element with a
 * `.Grid--breakFrom<Breakpoint>` class which is not proceded by an element
 * with a `.FigureImage` class.
 */

*:not(.FigureImage) {

	&+ .Grid--breakFromCompact .Grid-cell {
		@include breakpoint(compact) { margin-top: 0; }
	}
	&+ .Grid--breakFromMedium .Grid-cell {
		@include breakpoint(medium) { margin-top: 0; }
	}
}
